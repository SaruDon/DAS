import java.util.ArrayList;

public class Heap {
    ArrayList<Integer> arr = new ArrayList<>();

    public void add(int data) {
        arr.add(data);
        int x = arr.size() - 1;
        int par = (x - 1) / 2;
        while (arr.get(x) < arr.get(par)) {
            int temp = arr.get(x);
            arr.set(x, arr.get(par));
            arr.set(par, temp);

            x = par;
            par = (x - 1) / 2;
        }
    }

    public int peek() {
        return arr.get(0);
    }

    public void heapify(int i) {
        int leftChild = 2 * i + 1;
        int rightChild = 2 * i + 2;
        int min = i;

        if (leftChild < arr.size() && arr.get(leftChild) < arr.get(min)) {
            min = leftChild;
        }

        if (rightChild < arr.size() && arr.get(rightChild) < arr.get(min)) {
            min = rightChild;
        }

        if (min != i) {
            // swap
            int temp = arr.get(i);
            arr.set(i, arr.get(min));
            arr.set(min, temp);

            heapify(min);
        }
    }

    public int remove() {
        int data = arr.get(0);

        // swap
        int temp = arr.get(0);
        arr.set(0, arr.get(arr.size() - 1));
        arr.set(arr.size() - 1, temp);

        arr.remove(arr.size() - 1);

        heapify(0);
        return data;
    }

    public boolean isEmpty() {
        return arr.size() == 0;
    }

    public static void main(String[] args) {
        Heap h = new Heap();
        h.add(3);
        h.add(4);
        h.add(1);
        h.add(5);
        while (!h.isEmpty()) {
            System.out.println(h.peek() + " ");
            h.remove();
        }
    }
}
